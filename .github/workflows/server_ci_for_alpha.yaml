# This is a basic workflow to help you get started with Actions

name: SERVER-CI-FOR-ALPHA

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ci-test]
  # pull_request:
  #   branches: [ci-test]

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Build
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./common_api_server/gradlew

      - name: Clean for build with Gradle
        run: |
          cd ./common_api_server
          ./gradlew clean

      - name: Build with Gradle
        run: |
          cd ./common_api_server
          ./gradlew bootJar

      # Build and push docker image to ECR
      - name: Setup AWS with credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.OURAPT_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.OURAPT_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - id: login-ecr
        name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build image
        run: |
          cd ./common_api_server
          docker build --tag ${{ steps.login-ecr.outputs.registry }}/ourapt_api:${{ github.sha }} --file ./Dockerfile.alpha .

      - name: Push image to ECR
        run: |
          cd ./common_api_server 
          docker push ${{ steps.login-ecr.outputs.registry }}/ourapt_api:${{ github.sha }}

      - name: Setup EB-cli
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli --upgrade
          eb --version

      # TODO: image download 되는것 까지는 확인, health check가 안되서 그런가?
      - name: Deploy to EB
        env:
          IMAGE_REPO: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd ./common_api_server
          eb init --region ap-northeast-2 --platform "Docker running on 64bit Amazon Linux 2" ourapt_api
          eb use ourapt-api-alpha
          echo "Setting up environment variables for Docker run..."

          sed -i s,#OURAPT_IMAGE_REPO,${{ env.IMAGE_REPO }},g ./Dockerrun.aws.json 
          sed -i s,#OURAPT_IMAGE_NAME,ourapt-api,g ./Dockerrun.aws.json
          sed -i s,#OURAPT_IMAGE_TAG,${{ github.sha }},g ./Dockerrun.aws.json

          sed -i s,#API_LISTENING_PORT,8080,g ./Dockerrun.aws.json
          sed -i s,#RDB_HOST,${{ secrets.RDB_HOST }},g ./Dockerrun.aws.json

          sed -i s,#KARROT_APP_ID,${{ secrets.KARROT_APP_ID }},g ./Dockerrun.aws.json
          sed -i s,#KARROT_APP_SECRET,${{ secrets.KARROT_APP_SECRET }},g ./Dockerrun.aws.json
          sed -i s,#KARROT_API_KEY,${{ secrets.KARROT_API_KEY }},g ./Dockerrun.aws.json
          sed -i s,#KARROT_OPEN_API_BASE_URL,https://openapi.alpha.kr.karrotmarket.com,g ./Dockerrun.aws.json
          sed -i s,#KARROT_O_API_BASE_URL,https://oapi.alpha.kr.karrotmarket.com,g ./Dockerrun.aws.json
          cat ./Dockerrun.aws.json
          eb deploy
